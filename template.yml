---
AWSTemplateFormatVersion: "2010-09-09"

Description:
  CloudFormation Template for ethcore/parity

########################## Parameters #######################################
Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select a VPC that allows instances access to the Internet.
  SubnetID:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select two subnets in your selected VPC.
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Number of instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '1'
    Description: Maximum number of instances that can be launched in your ECS cluster.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small, t2.medium, t2.large, m3.medium, m3.large,
      m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge,
      c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge,
      r3.8xlarge, i2.xlarge, i2.2xlarge, i2.4xlarge, i2.8xlarge]
    ConstraintDescription: Please choose a valid instance type.
  Config:
    Description: node.toml value
    Type: String
  Password:
    Description: node.pwds
    Type: String
  Chain:
    Description: chain.json
    Type: String
  Key:
    Description: key.json
    Type: String


########################## Mappings #######################################
Mappings:
  AWSRegionToAMI:
    us-east-1:
      "AMIID" : "ami-c58c1dd3" # Amazon Linux AMI 2017.03
    us-east-2:
      "AMIID" : "ami-4191b524" # Amazon Linux AMI 2017.03
    us-west-1:
      "AMIID" : "ami-7a85a01a" # Amazon Linux AMI 2017.03
    us-west-2:
      "AMIID" : "ami-4836a428" # Amazon Linux AMI 2017.03
    ca-central-1:
      "AMIID" : "ami-0bd66a6f" # Amazon Linux AMI 2017.03
    eu-west-1:
      "AMIID" : "ami-01ccc867" # Amazon Linux AMI 2017.03
    eu-central-1:
      "AMIID" : "ami-b968bad6" # Amazon Linux AMI 2017.03
    eu-west-2:
      "AMIID" : "ami-b6daced2" # Amazon Linux AMI 2017.03
    ap-southeast-1:
      "AMIID" : "ami-fc5ae39f" # Amazon Linux AMI 2017.03
    ap-southeast-2:
      "AMIID" : "ami-162c2575" # Amazon Linux AMI 2017.03
    ap-northeast-2:
      "AMIID" : "ami-9d15c7f3" # Amazon Linux AMI 2017.03
    ap-northeast-1:
      "AMIID" : "ami-923d12f5" # Amazon Linux AMI 2017.03
    ap-south-1:
      "AMIID" : "ami-52c7b43d" # Amazon Linux AMI 2017.03
    sa-east-1:
      "AMIID" : "ami-37cfad5b" # Amazon Linux AMI 2017.03

########################## Resources #######################################
Resources:
  ParityFileSystem: 
    Type: "AWS::EFS::FileSystem"
    Properties: 
      FileSystemTags: 
        - 
          Key: "Name"
          Value: "ParityFileSystem"
  MountTarget1: 
    Type: "AWS::EFS::MountTarget"
    Properties: 
      FileSystemId: !Ref ParityFileSystem
      SubnetId: !Select [ 0, !Ref SubnetID ] 
      SecurityGroups: 
        - !Ref EfsSecurityGroup
  MountTarget2: 
    Type: "AWS::EFS::MountTarget"
    Properties: 
      FileSystemId: !Ref ParityFileSystem
      SubnetId: !Select [ 1, !Ref SubnetID ] 
      SecurityGroups: 
        - !Ref EfsSecurityGroup
  EfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EFS Security Group
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '2049'
          ToPort: '2049'
          SourceSecurityGroupId: !Ref EcsSecurityGroup
  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          SourceSecurityGroupId: !Ref EcsALBSecurityGroup
        - IpProtocol: tcp
          FromPort: '8545'
          ToPort: '8545'
          SourceSecurityGroupId: !Ref EcsALBSecurityGroup
        - IpProtocol: tcp
          FromPort: '8180'
          ToPort: '8180'
          SourceSecurityGroupId: !Ref EcsALBSecurityGroup
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref EcsALBSecurityGroup
  EcsALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8545'
          ToPort: '8545'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8180'
          ToPort: '8180'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14
  ECSCluster:
    Type: AWS::ECS::Cluster
  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref 'AWS::StackName', -ecs-ethcore-parity]]
      ContainerDefinitions:
       -
        Name: ethcore-parity
        MountPoints:
         - ContainerPath: /mnt/parity
           SourceVolume: efs-vol
        Command: 
          - "--ui-interface"
          - "0.0.0.0"
          - "--ui-no-validation"
          - "--warp"
          - "--jsonrpc-interface"
          - "0.0.0.0"
          - "--jsonrpc-hosts"
          - "all"
          - "--log-file"
          - "/var/log/parity.log"
#          - "--chain"
#          - "kovan"
          - "--base-path"
          - "/mnt/parity"
        Cpu: '10'
        Essential: 'true'
        Image: ethcore/parity:nightly
        Memory: '300'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: ecs-ethcore-parity
        PortMappings:
         - ContainerPort: 8080
           HostPort: 8080
         - ContainerPort: 8545
           HostPort: 8545
         - ContainerPort: 8180
           HostPort: 8180			   
      Volumes:
      - Name: efs-vol
        Host:
         SourcePath: /mnt/efs
  ECSELB:
      Type: "AWS::ElasticLoadBalancing::LoadBalancer"
      Properties:
        CrossZone: true
        HealthCheck:
          HealthyThreshold: 3
          Interval: 30
          Target: "HTTP:8180/"
          Timeout: 10
          UnhealthyThreshold: 3
        LoadBalancerName: ECSELB
        Listeners:
          - LoadBalancerPort: '80'
            InstancePort: '80'
            Protocol: HTTP
            InstanceProtocol: HTTP
          - LoadBalancerPort: '8180'
            InstancePort: '8180'
            Protocol: HTTP
            InstanceProtocol: HTTP
          - LoadBalancerPort: '8080'
            InstancePort: '8080'
            Protocol: HTTP
            InstanceProtocol: HTTP
          - LoadBalancerPort: '8545'
            InstancePort: '8545'
            Protocol: HTTP
            InstanceProtocol: HTTP
        Scheme: internet-facing
        SecurityGroups:
          - !Ref EcsALBSecurityGroup 
        Subnets: !Ref SubnetID
        Tags:
          - Key: Name
            Value: ECSELB
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
     - MountTarget1
     - MountTarget2
    Properties:
      VPCZoneIdentifier: !Ref 'SubnetID'
      LoadBalancerNames:
        - !Ref ECSELB
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: '1'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      SecurityGroups: [!Ref 'EcsSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      KeyName: !Ref 'KeyName'
      UserData:
        Fn::Base64: !Sub
         - |
          #!/bin/bash -xe
          yum update -y
          yum install -y git
          yum install -y nfs-utils
          yum install -y ecs-init
          yum install -y aws-cfn-bootstrap
          yum install -y httpd

          mkdir /mnt/efs
          mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${efsDnsName}:/ /mnt/efs

          if find /mnt/efs -mindepth 1 -print -quit | grep -q .; then
            echo "not empty, do nothing"
          else
            echo "The directory /mnt/efs is empty"
            cd /mnt/efs
            git clone -q https://github.com/jayyousi/ethcore_parity.git repository && echo "cloned"
            #cp -r /mnt/efs/repository/config/* /mnt/efs
            cp -r /mnt/efs/repository/scripts/* /var/www/cgi-bin/
            chmod a+x /var/www/cgi-bin/*
            rm -rf /mnt/efs/repository/

            echo '${Config}' >> /mnt/efs/node.toml
            echo '${Password}' >> /mnt/efs/node.pwds
            echo '${Chain}' >> /mnt/efs/chain.json
            
            mkdir keys
            echo '${Key}' >> /mnt/efs/keys/key.json
          fi

          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
          
          echo "success" >> /var/www/html/index.html
          usermod -a -G docker apache
          service httpd start
          chkconfig httpd on

          service docker start
          chkconfig docker on

          start ecs
         - {
              efsDnsName: !Join ['', [!Ref ParityFileSystem, '.efs.', !Ref "AWS::Region", '.amazonaws.com']],
           }
  service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref 'ECSCluster'
      DesiredCount: '1'
      TaskDefinition: !Ref 'taskdefinition'
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['ecs:CreateCluster', 'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
              'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
              'ecs:Submit*', 'logs:CreateLogStream', 'logs:PutLogEvents']
            Resource: '*'
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']
Outputs:
  ecsservice:
    Value: !Ref 'service'
  ecscluster:
    Value: !Ref 'ECSCluster'
  ECSELB:
    Description: Your ALB DNS URL
    Value: !Join ['', [!GetAtt [ECSELB, DNSName]]]
  taskdef:
    Value: !Ref 'taskdefinition'
  TOKEN:
    Description: Your Token Generation URL
    Value: !Join ['', [!GetAtt [ECSELB, DNSName] , "/cgi-bin/generate_token.sh"]]